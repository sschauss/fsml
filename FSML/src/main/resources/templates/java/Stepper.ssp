#import(de.sschauss.sle.fsml.FsmlAst._)
<%@ val fsm: Fsm %>
<%@ val sampleInput: List[Name] %>
<% var currentState: State = fsm.states.filter(state => state.initial).head %>
public class Stepper extends StepperBase<State, Input, Action> {
  public Stepper(HandlerBase<Action> handler){
    this.handler = handler;
    state = State.${currentState.id};
#for(input <- sampleInput)<% val transition: Transition = currentState.transitions.filter(transition => transition.input.equals(input)).head%>
    add(State.${currentState.id}, Input.${transition.input},#if(transition.action.isDefined) Action.${transition.action.get}#else null #end,#if(transition.id.isDefined) State.${transition.id.get}#else State.${currentState.id}#end);
<% if(transition.id.isDefined) currentState = fsm.states.filter(state => state.id.equals(transition.id.get)).head%>
#end
  }
}